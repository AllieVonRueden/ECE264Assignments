// ~ Overview ~ //

This assignment will give you more practice with recursion.

Suppose you are responsible for mowing the grass on the paths in a corn
maze.  Rather than simply going from the entrance to the exit, you would
need to cover every path in the maze.  This is the inspiration for this
assignment.  You will write a program that takes a maze as input, and
prints a set of driving directions for covering every path in the maze.

Several samples are included with the starter code.


// ~ Learning Goals ~ //

Recursion


// ~ Submitting Your Assignment ~ //

You must submit one zip file to blackboard containing the following:
(1) answer06.c
(2) git.log

You create the zip file using the following command.
 
 > zip pa06.zip answer06.c git.log


// ~ Rules ~ //

The following are strictly required in order to receive credit:
- ZIP file is created exactly as shown above.
- All test cases pass.  There is no partial credit for this assignment.
- git.log contains a valid git log (i.e., not empty)
- Assignment is submitted before the deadline.
- Code compiles on ecegrid without any compiler warnings or errors


// ~ Notes ~ //

You always enter the maze through the entrance, which is always on the
upper edge of the maze.

You don't need to worry about where you exit from--or even exiting at
all.  You only need to enter through the entrance and ensure that you
cover all paths.

A space (' ') signifies a path that you need to cover.  An 'X' signifies a
wall.

Your code may modify the maze that is passed in, if you like.

Each line of the output should be a direction ("N", "E", "S", or "W"),
a space, and an integer (number of units to move).  "N" means up, "S"
means down, "E" means right, and "W" means left.

The input maze will never be more than 99 characters high and/or 99
characters wide.

The code used to create the sample mazes is called "amaze" and is
included.  To create a maze that is w characters wide and h characters
high, call it as "amaze (h-1)/2 (w-1)/2".  The width and height in
characters must be an odd number.  For example, to create a
20x10-character maze (i.e., 21 characters wide, 11 characters high),
you would run this:  ./amaze 5 10 X


// ~ How to start ~ //

For this assignment, you only need to implement one function.

	print_directions(char** maze, int w, int h);

You may, of course have other helper functions in your answer06.c.

Create a blank answer06.c file with the following:

#include "answer06.h"
#include <stdio.h>

void print_directions(char** maze, int w, int h) {
	/* YOUR CODE HERE */
}

Next, think through how you would traverse the maze if you were actually mowing
the paths on a ride-on lawn mower.  For this assignment, recursion is your friend!

This assignment is similar to recursion-related problems that frequently come
up in job interviews with large software companies.  Think through the problem and
discuss your ideas with classmates.


// ~ Tips ~ //

You may want to your algorithm on paper before coding it up.

Beware of buffer overflow errors.  It is very easy to create segmentation
faults if your "mower" goes through the walls and outside the maze!
